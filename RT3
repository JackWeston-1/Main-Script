local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local Window = WindUI:CreateWindow({
    Title = "Restaurant Tycoon 3",
    Icon = "door-open",
    Author = "Made By Minh",
    Folder = "RT3Minh",
    Size = UDim2.fromOffset(490, 320),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 190,
    Background = "", -- rbxassetid only
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    User = {
        Enabled = false,
        Anonymous = true,
        Callback = function()
            print("clicked")
        end,
    },
})

Window:EditOpenButton({
    Title = "RT3",
    Icon = "Box",
    CornerRadius = UDim.new(0,10),
    StrokeThickness = 1.75,
    Color = ColorSequence.new( -- gradient
        Color3.fromHex("6FA8DC"), 
        Color3.fromHex("CFE2F3")
    ),
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
})

-----------------------------------------------------------Tabs--------------------------------------------------------------

local MainTab = Window:Tab({
    Title = "Main",
    Icon = "house",
    Desc = "Main Section",
    Locked = false,
})

Window:SelectTab(1) -- Number of Tab


----------------------------------------------------------Main------------------------------------------------------------------
local takeOrderThread = nil
local ToggleTakeOrder = MainTab:Toggle({
    Title = "Auto Take Order",
    Desc = "Tự động nhận order từ khách",
    Icon = "bird",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        if state then
            takeOrderThread = task.spawn(function()
                while true do
                    for _, ui in ipairs(game.Players.LocalPlayer.PlayerGui:GetChildren()) do
                        if ui.Name == "CustomerSpeechUI" and ui:IsA("BillboardGui") then
                            local adornee = ui:FindFirstChild("Adornee")
                            if adornee and adornee.Parent and adornee.Parent.Parent then
                                local group = adornee.Parent.Parent.Name
                                local customer = adornee.Parent.Name
                                game.ReplicatedStorage.Events.Restaurant.TaskCompleted:FireServer({
                                    GroupId = tostring(group),
                                    Tycoon = tycoon,
                                    Name = "TakeOrder",
                                    CustomerId = tostring(customer)
                                })
                            end
                        end
                    end
                    task.wait(0.5)
                end
            end)
        elseif takeOrderThread then
            task.cancel(takeOrderThread)
        end
    end
})





local ToggleDoOrder = MainTab:Toggle({
	Title = "Auto Do Order",
	Desc = "Tự động nhận đơn ở quầy",
	Icon = "clipboard",
	Type = "Checkbox",
	Default = false,
	Callback = function(state)
		local temp = workspace:FindFirstChild("Temp")
		local delay = 0.25
		local autoDoOrderThread

		if state and temp then
			autoDoOrderThread = task.spawn(function()
				while state do
					for _, v in temp:GetDescendants() do
						if v:IsA("ProximityPrompt") then
							fireproximityprompt(v)
							task.wait()
						end
					end
					task.wait(delay)
				end
			end)
		elseif autoDoOrderThread then
			task.cancel(autoDoOrderThread)
		end
	end
})





local autoCookThread = nil
local ToggleCook = MainTab:Toggle({
    Title = "Auto Cook",
    Desc = "Tự động nấu ăn",
    Icon = "flame",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        settings.auto_cook = state
        if state then
            autoCookThread = task.spawn(function()
                while settings.auto_cook do
                    if surface then
                        for _, v in surface:GetDescendants() do
                            if v:IsA("ProximityPrompt") and v.Name == "CookPrompt" then
                                fireproximityprompt(v)
                                task.wait()
                            end
                        end
                    end
                    task.wait(settings.toggle_delay)
                end
            end)
        elseif autoCookThread then
            task.cancel(autoCookThread)
        end
    end
})
