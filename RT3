local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local Window = WindUI:CreateWindow({
    Title = "Restaurant Tycoon 3",
    Icon = "door-open",
    Author = "Made By Minh",
    Folder = "RT3Minh",
    Size = UDim2.fromOffset(490, 320),
    Transparent = true,
    Theme = "Dark",
    SideBarWidth = 190,
    Background = "", -- rbxassetid only
    BackgroundImageTransparency = 0.42,
    HideSearchBar = true,
    ScrollBarEnabled = false,
    User = {
        Enabled = false,
        Anonymous = true,
        Callback = function()
            print("clicked")
        end,
    },
})

Window:EditOpenButton({
    Title = "RT3",
    Icon = "Box",
    CornerRadius = UDim.new(0,10),
    StrokeThickness = 1.75,
    Color = ColorSequence.new( -- gradient
        Color3.fromHex("6FA8DC"), 
        Color3.fromHex("CFE2F3")
    ),
    OnlyMobile = false,
    Enabled = true,
    Draggable = true,
})

-----------------------------------------------------------Tabs--------------------------------------------------------------

local MainTab = Window:Tab({
    Title = "Main",
    Icon = "house",
    Desc = "Main Section",
    Locked = false,
})

Window:SelectTab(1) -- Number of Tab


----------------------------------------------------------Main------------------------------------------------------------------

local takeOrderRunning = false
local takeOrderThread = nil

local Toggle = MainTab:Toggle({
    Title = "Auto Take Order",
    Desc = "Tự động nhận order từ khách",
    Icon = "bird",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        takeOrderRunning = state
        if takeOrderRunning then
            takeOrderThread = task.spawn(function()
                while takeOrderRunning do
                    for _, v in ipairs(game.Players.LocalPlayer.PlayerGui:GetDescendants()) do
                        if v:IsA("ImageLabel") and v.Parent.Parent.Parent.Name == "CustomerSpeechUI" and v.Parent.Parent.Size == UDim2.new(1, 0, 1, 0) then
                            local group = v.Parent.Parent.Parent.Adornee.Parent.Parent.Name
                            local customer = v.Parent.Parent.Parent.Adornee.Parent.Name
                            game.ReplicatedStorage.Events.Restaurant.TaskCompleted:FireServer({
                                GroupId = tostring(group),
                                Tycoon = tycoon,
                                Name = "TakeOrder",
                                CustomerId = tostring(customer)
                            })
                        end
                    end
                    task.wait(0.25)
                end
            end)
        elseif takeOrderThread then
            task.cancel(takeOrderThread)
        end
    end
})

local autoDoOrderThread = nil

local Toggle = MainTab:Toggle({
    Title = "Auto Do Order",
    Desc = "Tự động nhận đơn ở quầy",
    Icon = "clipboard",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        settings.auto_do_order = state
        if state then
            autoDoOrderThread = task.spawn(function()
                while settings.auto_do_order do
                    for _, v in temp:GetDescendants() do
                        if v:IsA("ProximityPrompt") then
                            fireproximityprompt(v)
                            task.wait()
                        end
                    end
                    task.wait(settings.toggle_delay)
                end
            end)
        elseif autoDoOrderThread then
            task.cancel(autoDoOrderThread)
        end
    end
})

local autoCookThread = nil

local Toggle = MainTab:Toggle({
    Title = "Auto Cook",
    Desc = "Tự động nấu ăn",
    Icon = "flame",
    Type = "Checkbox",
    Default = false,
    Callback = function(state)
        settings.auto_cook = state
        if state then
            autoCookThread = task.spawn(function()
                local oven = nil
                for _, v in surface:GetDescendants() do
                    if v.Name:find("Oven") then
                        oven = v.Parent
                        break
                    end
                end
                while settings.auto_cook do
                    if oven then
                        local cookEvents = replicated_storage:FindFirstChild("Events")
                        if cookEvents then
                            local cookModule = cookEvents:FindFirstChild("Cook")
                            if cookModule then
                                local cookInput = cookModule:FindFirstChild("CookInputRequested")
                                if cookInput then
                                    cookInput:FireServer("Interact", oven, "Oven")
                                end
                            end
                        end
                    end
                    task.wait(settings.toggle_delay)
                end
            end)
        elseif autoCookThread then
            task.cancel(autoCookThread)
        end
    end
})

